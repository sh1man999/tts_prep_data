import hashlib
from typing import Generator, List

import typer
from tqdm import tqdm

from models.base_llm_client import BaseLLMClient
from models.dialogue_pair import DialoguePair
from services.text_generator import TextGeneratedLLMResult




NUMBERS_TO_WORDS_PROMPT = """
Ты - эксперт по адаптации текста для систем синтеза речи (TTS). 

Твоя задача проговорить входной текст на русском языке без цифр, спецсимволов и так далее. Читай то что ты видишь как будто ты диктор. Когда ты говоришь у тебя нет форматирования, только чистые буквы и простые знаки препинания.

ВАЖНО: Ты получишь батч из нескольких JSON-записей. Обработай каждую запись отдельно, сохранив структуру полей user_query и ai_response.

Правила преобразования:

1. Числа → слова:
   - 70% → семьдесят процентов
   - 1-2 часа → один-два часа
   - 10-15 минут → десять-пятнадцать минут
   - 16-20 недель → шестнадцать-двадцать недель
   - 3,14 → три целых четырнадцать сотых
   - 0,5 → ноль целых пять десятых
   - 1/2 → одна вторая
   - 3/4 → три четвертых

2. Специальные термины с цифрами:
   - омега-3 → омега-три
   - витамин B12 → витамин бэ двенадцать
   - витамин D3 → витамин дэ три
   - COVID-19 → ковид-девятнадцать
   - 5G → пять джи
   - 4K → четыре кей

3. Англоязычные термины и аббревиатуры:
   - Wi-Fi → вай-фай
   - iOS → ай о эс
   - USB → ю эс би
   - PDF → пи ди эф
   - FAQ → фак
   - CEO → си и о
   - AI → эй ай

4. Единицы измерения с числами:
   - 5 км → пять километров
   - 10 мг → десять миллиграммов
   - 2 л → два литра
   - 37,5°C → тридцать семь целых пять десятых градусов цельсия
   - 100 м² → сто квадратных метров

5. Временные обозначения:
   - 24/7 → двадцать четыре на семь
   - 90-е годы → девяностые годы
   - XXI век → двадцать первый век
   - 15:30 → пятнадцать тридцать
   - 9:00 → девять ноль ноль
   - 2024 год → две тысячи двадцать четвертый год

6. Даты:
   - 01.01.2024 → первое января две тысячи двадцать четвертого года
   - 15/03 → пятнадцатое марта
   - 2020-2025 → с две тысячи двадцатого по две тысячи двадцать пятый год

7. Телефоны и коды:
   - +7 (495) 123-45-67 → плюс семь четыреста девяносто пять сто двадцать три сорок пять шестьдесят семь
   - 8-800-555-35-35 → восемь восемьсот пятьсот пятьдесят пять тридцать пять тридцать пять

8. Символы и знаки:
   - = → равно
   - + → плюс
   - - → минус
   - × → умножить на
   - ÷ → разделить на
   - / → дробь (в контексте дробей) или слэш (в других контекстах)
   - ≤ → меньше или равно
   - ≥ → больше или равно
   - № → номер
   - § → параграф
   - @ → собака
   - # → решетка
   - & → и
   - $ → доллар
   - € → евро
   - ₽ → рубль

9. Математические выражения:
   - 2+2=4 → два плюс два равно четыре
   - 10×5 → десять умножить на пять
   - √16 → квадратный корень из шестнадцати

10. Порядковые числительные:
   - 1-й → первый
   - 2-я → вторая
   - 3-е → третье
   - 21-й → двадцать первый

Дополнительные правила:
- Сохраняй падежи и согласования в предложениях
- Если число входит в название или бренд, преобразуй согласно контексту
- Для больших чисел используй разряды: 1000000 → один миллион
- Сохраняй естественность и читаемость текста

Верни результат в формате JSON, где каждая обработанная запись имеет уникальный id:
{
  "pairs": [
    {
      "id": 1,
      "user_query": "Обработанный текст user_query",
      "ai_response": "Обработанный текст ai_response"
    },
    {
      "id": 2,
      "user_query": "Следующий обработанный текст",
      "ai_response": "Следующий обработанный ответ"
    }
  ]
}
"""


def convert_numbers_to_words(
    data: str, llm_client: BaseLLMClient, temperature: float = 0.3
) -> List[DialoguePair]:
    user_prompt = f"Преобразуй все числа и цифры в следующем тексте в их словесное представление:\n\n{data}"
    messages = [
        {"role": "system", "content": NUMBERS_TO_WORDS_PROMPT},
        {"role": "user", "content": user_prompt},
    ]

    response = llm_client.chat(
        messages=messages,
        temperature=temperature,
        response_format=TextGeneratedLLMResult,
    )

    return TextGeneratedLLMResult.model_validate_json(response).pairs


def generate_text_hash(text: str) -> str:
    """
    Генерирует уникальный хеш для текста.

    Args:
        text: Исходный текст

    Returns:
        Хеш строка (первые 32 символов SHA-256)
    """
    # Используем SHA-256 для генерации хеша
    hash_object = hashlib.sha256(text.encode('utf-8'))
    # Берем первые 32 символов для краткости
    return hash_object.hexdigest()[:32]


def process_jsonl_file(
    jsonl_file_path: str,
    llm_client: BaseLLMClient,
    batch_size: int,
) -> Generator[List[DialoguePair], None, None]:
    with open(jsonl_file_path, "r", encoding="utf-8") as jsonl_file:
        lines = jsonl_file.readlines()
        total_rows = len(lines)

        typer.echo(f"Начало обработки {total_rows} строк из файла {jsonl_file_path}...")
        typer.echo(f"Размер батча: {batch_size}")

        # Создаем прогресс-бар
        with tqdm(total=total_rows, desc="Обработка строк", unit="строк") as pbar:
            batch = []

            for index, row in enumerate(lines):
                # Добавляем строку в батч как есть (уже в JSON формате)
                batch.append(row.strip())

                # Если батч заполнен или это последняя строка
                if len(batch) == batch_size or index == total_rows - 1:
                    if batch:  # Проверяем, что батч не пустой
                        try:
                            result = convert_numbers_to_words(
                                batch, llm_client, temperature=0
                            )

                            # Обновляем прогресс-бар
                            pbar.update(len(batch))

                            yield result

                        except Exception as e:
                            typer.echo(f"\nОшибка при обработке батча: {e}")
                            # Все равно обновляем прогресс
                            pbar.update(len(batch))

                        # Очищаем батч для следующей итерации
                        batch = []

        typer.echo(f"\nОбработка завершена. Всего обработано: {total_rows} строк")